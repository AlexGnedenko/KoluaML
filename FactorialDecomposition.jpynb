{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Разложение факториала"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Инструкция:\n",
    "\n",
    "Цель этого задания разложить n! (факториал n) на простые множители.\n",
    "\n",
    "Примеры:\n",
    "\n",
    "n = 12;\n",
    "decomp(12) -> \"2^10 * 3^5 * 5^2 * 7 * 11\"\n",
    "\n",
    "n = 22;\n",
    "decomp(22) -> \"2^19 * 3^9 * 5^4 * 7^3 * 11^2 * 13 * 17 * 19\"\n",
    "\n",
    "n = 25;\n",
    "decomp(25) -> 2^22 * 3^10 * 5^6 * 7^3 * 11^2 * 13 * 17 * 19 * 23\n",
    "\n",
    "Простые числа должны быть в порядке возрастания.\n",
    "Когда показатель простого числа равен 1, не ставьте показатель степени.\n",
    "\n",
    "Заметки:\n",
    "\n",
    "Функция decomp(n) должна возвращать разложение n! на простые множители в порядке возрастания простых чисел, как строка. Факториал может быть очень большим числом (4000! имеет 12674 цифры, n будет от 300 до 4000). Выходная строка не должна содержать лишних побелов в конце."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функция определения является ли число простым:\n",
    "\n",
    "Ниже напишите реализацию функции, которая будет возвращать True или False в зависимости от того, является ли поданное на вход число простым."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isPrime(value):\n",
    "  #TO DO\n",
    "  return rezult"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функция генерации таблицы простых чисел до входного maxNumber:\n",
    "\n",
    "Напишите реализацию функции, которая возвращает массив простых чисел, которые меньше входного maxNumber. Массив может быть двухмерным, как две строки. Первую заполнить простыми числами, вторая останеться для будущих функций записывать расрожение."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generateArrayOfPrimeNumbers(maxNumber):\n",
    "  #TO DO\n",
    "  return primes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функция разложения числа на простые множители:\n",
    "\n",
    "Раскладывает число number на простые множители. Получает массив простых чисел primes на вход. Не возвращает ничего, работает только с массивом primes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unexpected EOF while parsing (<ipython-input-3-1407fb7f5ca7>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-3-1407fb7f5ca7>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    #TO DO\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unexpected EOF while parsing\n"
     ]
    }
   ],
   "source": [
    "def decomposeNumberToPrime(number, primes):  \n",
    "  #TO DO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функция разложения факториала числа на простые множители:\n",
    "\n",
    "Раскладывает факториал числа number на простые множители. Получает массив простых чисел primes на вход. Должна обращаться к decomposeNumberToPrime(number, primes). Не возвращает ничего, работает только с массивом primes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decomposeFactorialOfNumber(n, primes):\n",
    "  #TO DO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Функция перевода массива простых чисел primes в корректную\n",
    "### выходную строку:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertPrimesToString(primes):\n",
    "    #TO DO\n",
    "    return rezult"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Основная программа. Вызов всех остальных функций. Не менять!!!\n",
    "### Должно заработать в таком виде!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def decomp(n):\n",
    "  primes = generateArrayOfPrimeNumbers(int(n))\n",
    "  decomposeFactorialOfNumber(n, primes)\n",
    "  return convertPrimesToString(primes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Тестируем функцию decomp(n):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "decomp(2)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
